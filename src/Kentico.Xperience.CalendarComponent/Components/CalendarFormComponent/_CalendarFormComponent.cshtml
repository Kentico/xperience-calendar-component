@using Kentico.Xperience.CalendarComponent.Components
@using Kentico.Forms.Web.Mvc
@using Kentico.Web.Mvc

@model CalendarFormComponent

@{
    var htmlAttributes = ViewData.Kentico().GetEditorHtmlAttributes();
    var calendarId = Html.IdFor(m => m.SelectedDate);
    htmlAttributes["id"] = calendarId;

    string altFormat = Model.Properties.DateFormat.Replace('M', 'm');
    if (!Model.Properties.DateOnly)
    {
        if (Model.Properties.Is24HourFormat)
        {
            altFormat += " H:i";
        }
        else
        {
            altFormat += " G:i K";
        }
    }

    var flatpickrOptions = new
    {
        dateFormat = "m/d/Y h:i:S K",
        altInput = true,
        altFormat = altFormat,
        defaultDate = new List<string>
        {
            Model.SelectedDate
        },
        enableTime = !Model.Properties.DateOnly,
        minuteIncrement = Model.Properties.TimeInterval,
        time_24hr = Model.Properties.Is24HourFormat
    };
}

@Html.TextBoxFor(m => m.SelectedDate, htmlAttributes)

<script>
    async function fetchExcludedDateTimeData(dataProviderName) {
        try {
            let response = await fetch(`/kentico.calendarComponent/GetExcludedDateTimeData?dataProviderName=${encodeURIComponent(dataProviderName)}`);
            if (response.ok) {
                let data = await response.json();
                return data;
            } else {
                throw new Error('Failed to fetch data');
            }
        } catch (error) {
            console.error('Error fetching data:', error);
            return {
                excludedDates: [],
                excludedTimeFrames: []
            };
        }
    }

    function isTimeInRange(selectedDateTime, excludedFrame, minuteIncrement) {
        const time = selectedDateTime.getHours() * 60 + selectedDateTime.getMinutes();

        const startMinutes = excludedFrame.getHours() * 60 + excludedFrame.getMinutes();
        const endMinutes = startMinutes + minuteIncrement;

        return time >= startMinutes && time < endMinutes;
    }

    function areSameDay(d1, d2) {
        return d1.getFullYear() === d2.getFullYear() &&
            d1.getMonth() === d2.getMonth() &&
            d1.getDate() === d2.getDate();
    }

    function isExcludedTime(date, excludedTimeFrames, minuteIncrement) {
        for (const frame of excludedTimeFrames) {
            
            if (areSameDay(date, frame))
            {
                if (isTimeInRange(date, frame, minuteIncrement))
                {
                    return true;
                }
            }
        }
        return false;
    }

    function handleDateTimeChange(selectedDates, dateStr, instance, excludedTimeFrames, lastSelected) {
        const selectedDate = selectedDates[0];
        const last = new Date(lastSelected);
        const adjustedDate = new Date(selectedDate);

        if (selectedDate && isExcludedTime(selectedDate, excludedTimeFrames, instance.config.minuteIncrement)) {
            if (adjustedDate < last) {
                adjustedDate.setMinutes(adjustedDate.getMinutes() - instance.config.minuteIncrement);
            }
            else { 
                adjustedDate.setMinutes(adjustedDate.getMinutes() + instance.config.minuteIncrement);
            }
            
            instance.setDate(adjustedDate, true);

            return adjustedDate;
        }

        return adjustedDate;
    }

    async function initializeFlatpickr() {
        let excludedDateTimeData = await fetchExcludedDateTimeData('@Model.Properties.ExcludedDateTimeDataProvider');

        let flatpickrOptions = @Html.Raw(Json.Serialize(flatpickrOptions));

        flatpickrOptions.disable = excludedDateTimeData.excludedDates.map((x) => new Date(x));
        flatpickrOptions.minTime = excludedDateTimeData.minTime;
        flatpickrOptions.maxTime = excludedDateTimeData.maxTime;
        flatpickrOptions.minDate = excludedDateTimeData.minDate;
        flatpickrOptions.maxDate = excludedDateTimeData.maxDate;

        let disabledDateTimes = excludedDateTimeData.excludedTimeFrames.map((x) => new Date(x));
        let onChange = [];
        let lastSelected = new Date(flatpickrOptions.defaultDate[0]);

        onChange.push(function (selectedDates, dateStr, instance) {
            lastSelected = handleDateTimeChange(selectedDates, dateStr, instance, disabledDateTimes, lastSelected);
        });

        flatpickrOptions.onChange = onChange;

        window.xperience.calendarComponent.initializeFlatpickr("#@calendarId", flatpickrOptions);
    }

    var script = document.createElement('script');
    script.src = "~/_content/Kentico.Xperience.CalendarComponent/js/ktc-calendarComponent.js";
    script.onload = function () {
        initializeFlatpickr();
    };
    document.head.appendChild(script);
</script>
